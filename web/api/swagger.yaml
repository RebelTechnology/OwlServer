swagger: '2.0'
info:
  title: OWL server API
  description: Exposes OWL patch data over a REST API.
  version: 1.0.0
  contact:
    name: Sam Artuso
host: 'hoxtonowl.localhost:3000'
schemes:
  - http
basePath: /
consumes:
  - application/json
produces:
  - application/json
paths:
  /patches:
    get:
      summary: Return summary of all public patches.
      operationId: get_patches
      description: >
        Returns a summary of all public patches.


        Private patches are not returned by this API call.


        To retrieve all the available fields for a certain patch, use `GET
        /patches/{patchId}`.
      parameters:
        - name: author.name
          in: query
          description: Name of the author of the patch.
          required: false
          type: string
      tags:
        - patches
      responses:
        '200':
          description: 'A summary of all public patches, alphabetically sorted by patch name.'
          schema:
            type: object
            required:
              - count
              - result
            properties:
              count:
                type: integer
                description: The total number of public patches.
              result:
                type: array
                items:
                  $ref: '#/definitions/PatchSummary'
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/GeneralError'
  /authors:
    get:
      summary: List all authors.
      operationId: get_authors
      description: Returns a list of all authors.
      tags:
        - authors
      responses:
        '200':
          description: 'A list of all authors, alphabetically sorted.'
          schema:
            type: object
            required:
              - count
              - result
            properties:
              count:
                type: integer
                description: The total number of authors.
              result:
                type: array
                items:
                  $ref: '#/definitions/PatchAuthor'
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/GeneralError'
  /tags:
    get:
      summary: List all tags.
      operationId: get_tags
      description: Returns a list of all tags.
      tags:
        - tags
      responses:
        '200':
          description: 'A list of all tags, alphabetically sorted.'
          schema:
            type: object
            required:
              - count
              - result
            properties:
              count:
                type: integer
                description: The total number of tags.
              result:
                type: array
                items:
                  type: string
  /builds:
    get:
      summary: Starts the download of a patch build.
      operationId: get_builds
      description: |
        Starts the download of a patch build.

        Patch builds may be either of `sysx` or `js` type.
      parameters:
        - name: type
          in: query
          description: Patch build type.
          required: false
          type: string
          default: sysx
          enum:
            - sysx
            - sysex
            - js
      tags:
        - builds
      responses:
        '200':
          description: The selected build will be streammed in the HTTP response.
        '401':
          description: The specified patch could not be found.
          schema:
            $ref: '#/definitions/GeneralError'
        '404':
          description: The build could not be found.
          schema:
            $ref: '#/definitions/GeneralError'
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/GeneralError'
    put:
      summary: Builds a patch.
      operationId: put_builds
      description: |
        Builds a patch. The build is stored on the server and can be fetched
        afterwards with a `GET` request.

        Patch builds can either be of `sysx` or `js` type.
      parameters:
        - name: parameters
          in: body
          description: The request parameters.
          required: true
          schema:
            type: object
            required:
              - format
            properties:
              format:
                type: string
                description: The patch format.
                default: sysx
                enum:
                  - sysx
                  - sysex
                  - js
              credentials:
                type: object
                required:
                  - type
                properties:
                  type:
                    type: string
                    description: The type of credential.
                    default: api_key
                    enum:
                      - api_key
                      - wordpress
                  cookie:
                    type: string
                    description: WP authentication token.
      tags:
        - builds
      responses:
        '200':
          description: The patch was built successfully.
          schema:
            type: object
            required:
              - success
            properties:
              success:
                type: boolean
                description: Whether the patch build succeeded.
              stdout:
                type: string
                description: All the messages that the compiler sent to `stdout`.
              stderr:
                type: string
                description: All the messages that the compiler sent to `stderr`.
        '401':
          description: Access denied.
          schema:
            $ref: '#/definitions/GeneralError'
        '404':
          description: The specified patch could not be found.
          schema:
            $ref: '#/definitions/GeneralError'
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/GeneralError'
definitions:
  PatchSummary:
    type: object
    required:
      - _id
      - author
      - creationTimeUtc
      - name
      - seoName
    properties:
      _id:
        type: string
        description: The patch ID.
      author:
        type: object
        $ref: '#/definitions/PatchAuthor'
      creationTimeUtc:
        type: integer
        description: 'The time when the patch was created, expressed in seconds since the UNIX epoch.'
      name:
        type: string
        description: The name of the patch.
      seoName:
        type: string
        description: An SEO-friendly name for the patch.
  PatchAuthor:
    type: object
    required:
      - name
    properties:
      name:
        type: string
        description: The name of the author of the patch.
      url:
        type: string
        format: uri
        description: "The author's URL."
      type:
        type: string
        description: Used internally. The only possible value for this field is `wordpress` at the moment.
      wordpressId:
        type: integer
        description: Used internally. The ID of the WordPress user the patch belongs to.
  Credentials:
    type: object
    required:
      - type
    properties:
      type:
        type: string
        description: The type of credential.
        default: api_key
        enum:
          - api_key
          - wordpress
      cookie:
        type: string
        description: WP authentication token.
  GeneralError:
    type: object
    required:
      - message
    properties:
      message:
        type: string
        description: The error message.
      status:
        type: integer
        description: The error code.
